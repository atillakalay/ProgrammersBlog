@using Core.Utilities.Results.ComplexTypes
@model Entities.Dtos.CategoryListDto
@{
    Layout = "_Layout";
    ViewBag.Title = "Kategoriler Index";
}
@if (Model.ResultStatus == ResultStatus.Success)
{
    <div id="modalPlaceHolder" aria-hidden="true"></div>
    <div class="card mb-4 mt-2">
        <div class="card-header">
            <i class="fas fa-table mr-1"></i>
            Kategoriler
        </div>
        <div class="card-body">
            <div class="spinner-border" role="status" style="display: none;">
                <span class="sr-only">Yükleniyor...</span>
            </div>
            <div class="table-responsive">
                <table class="table table-bordered" id="categoriesTable" width="100%" cellspacing="0">
                    <thead>
                        <tr>
                            <th>#</th>
                            <th>Adı</th>
                            <th>Açıkalaması</th>
                            <th>Aktif mi?</th>
                            <th>Silinmiş mi?</th>
                            <th>Not</th>
                            <th>Oluşturulma Tarihi</th>
                            <th>Oluşturan Kullanıcı Adı</th>
                            <th>Son Düzenlenme Tarihi</th>
                            <th>Son Düzenleyen Kullanıcı Adı</th>
                            <th>İşlemler</th>
                        </tr>
                    </thead>
                    <tfoot>
                        <tr>
                            <th>#</th>
                            <th>Adı</th>
                            <th>Açıkalaması</th>
                            <th>Aktif mi?</th>
                            <th>Silinmiş mi?</th>
                            <th>Not</th>
                            <th>Oluşturulma Tarihi</th>
                            <th>Oluşturan Kullanıcı Adı</th>
                            <th>Son Düzenlenme Tarihi</th>
                            <th>Son Düzenleyen Kullanıcı Adı</th>
                            <th>İşlemler</th>
                        </tr>
                    </tfoot>
                    <tbody>

                        @foreach (var category in Model.Categories)
                        {
                            <tr name="@category.Id">
                                <td>@category.Id</td>
                                <td>@category.Name</td>
                                <td>@category.Description</td>
                                <td>@category.IsActive</td>
                                <td>@category.IsDeleted</td>
                                <td>@category.Note</td>
                                <td>@category.CreatedDate.ToShortDateString()</td>
                                <td>@category.CreatedByName</td>
                                <td>@category.ModifiedDate.ToShortDateString()</td>
                                <td>@category.ModifiedByName</td>
                                <td>
                                    <button class="btn btn-primary btn-sm"><span class="fas fa-edit"></span> Düzenle</button>
                                    <button class="btn btn-danger btn-sm btn-delete" data-id="@category.Id"><span class="fas fa-minus-circle"></span> Sil</button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
}
@if (Model.ResultStatus == ResultStatus.Error)
{
    <div class="alert alert-danger mt-3">
        @Model.Message <br />
        Dashboard sayfasına geri dönmek için lütfen <a class="alert-link" asp-area="Admin" asp-controller="Home" asp-action="Index">tıklayınız.</a>
    </div>
}
@section Scripts
{
    <script>
        $(document).ready(function() {
            @* DataTables start here. *@
            $('#categoriesTable').DataTable({
                dom:
                    "<'row'<'col-sm-3'l><'col-sm-6 text-center'B><'col-sm-3'f>>" +
                        "<'row'<'col-sm-12'tr>>" +
                        "<'row'<'col-sm-5'i><'col-sm-7'p>>",
                buttons: [
                    {
                        text: 'Ekle',
                        attr: {
                            id: "btnAdd",
                        },
                        className: 'btn btn-success',
                        action: function(e, dt, node, config) {

                        }
                    },
                    {
                        text: 'Yenile',
                        className: 'btn btn-warning',
                        action: function(e, dt, node, config) {
                            $.ajax({
                                type: 'GET',
                                url: '@Url.Action("GetAllCategories", "Category")',
                                contentType: "application/Json",
                                beforeSend: function() {
                                    $('#categoriesTable').hide();
                                    $('.spinner-border').show();
                                },
                                success: function(data) {
                                    const categoryListDto = jQuery.parseJSON(data);
                                    console.log(categoryListDto);
                                    if (categoryListDto.ResultStatus === 0) {
                                        let tableBody = "";
                                        $.each(categoryListDto.Categories.$values,
                                            function(index, category) {
                                                tableBody += `
                                            <tr>
                                                <td>${category.Id}</td>
                                                <td>${category.Name}</td>
                                                <td>${category.Description}</td>
                                                <td>${convertFirstLetterToUpperCase(category.IsActive.toString())}</td>
                                                <td>${convertFirstLetterToUpperCase(category.IsDeleted.toString())}</td>
                                                <td>${category.Note}</td>
                                                <td>${convertToShortDate(category.CreatedDate)}</td>
                                                <td>${category.CreatedByName}</td>
                                                <td>${convertToShortDate(category.ModifiedDate)}</td>
                                                <td>${category.ModifiedByName}</td>
                                                </tr>`
                                            });
                                        $('#categoriesTable>tbody').replaceWith(tableBody);
                                        $('.spinner-border').hide();
                                        $('#categoriesTable').fadeIn(1400);
                                    } else {
                                        toastr.error(`${categoryListDto.Message}`, 'İşlem Başarısız!');
                                    }
                                },
                                error: function(err) {
                                    console.log(err);
                                    toastr.error(`${err.statusText}`, 'İşlem Başarısız!');
                                }
                            });
                        }
                    }
                ],
                language: {
                    "sDecimal": ",",
                    "sEmptyTable": "Tabloda herhangi bir veri mevcut değil",
                    "sInfo": "_TOTAL_ kayıttan _START_ - _END_ arasındaki kayıtlar gösteriliyor",
                    "sInfoEmpty": "Kayıt yok",
                    "sInfoFiltered": "(_MAX_ kayıt içerisinden bulunan)",
                    "sInfoPostFix": "",
                    "sInfoThousands": ".",
                    "sLengthMenu": "Sayfada _MENU_ kayıt göster",
                    "sLoadingRecords": "Yükleniyor...",
                    "sProcessing": "İşleniyor...",
                    "sSearch": "Ara:",
                    "sZeroRecords": "Eşleşen kayıt bulunamadı",
                    "oPaginate": {
                        "sFirst": "İlk",
                        "sLast": "Son",
                        "sNext": "Sonraki",
                        "sPrevious": "Önceki"
                    },
                    "oAria": {
                        "sSortAscending": ": artan sütun sıralamasını aktifleştir",
                        "sSortDescending": ": azalan sütun sıralamasını aktifleştir"
                    },
                    "select": {
                        "rows": {
                            "_": "%d kayıt seçildi",
                            "0": "",
                            "1": "1 kayıt seçildi"
                        }
                    }
                }
            });
            @* DataTables end here *@
            @* Ajax GET / Getting the _CategoryAddPartial as Modal Form starts from here. *@
            $(function() {
                const url = '@Url.Action("Add", "Category")';
                const placeHolderDiv = $('#modalPlaceHolder');
                $('#btnAdd').click(function() {
                    $.get(url).done(function(data) {
                        placeHolderDiv.html(data);
                        placeHolderDiv.find(".modal").modal('show');
                    });
                });
                @* Ajax GET / Getting the _CategoryAddPartial as Modal Form ends here. *@
                @* Ajax POST / Posting the FormData as CategoryAddDto starts from here. *@
                placeHolderDiv.on('click',
                    '#btnSave',
                    function(event) {
                        event.preventDefault();
                        const form = $('#form-category-add');
                        const actionUrl = form.attr('action');
                        const dataToSend = form.serialize();
                        $.post(actionUrl, dataToSend).done(function(data) {
                            console.log(data);
                            const categoryAddAjaxModel = jQuery.parseJSON(data);
                            console.log(categoryAddAjaxModel);
                            const newFormBody = $('.modal-body', categoryAddAjaxModel.CategoryAddPartial);
                            placeHolderDiv.find('.modal-body').replaceWith(newFormBody);
                            const isValid = newFormBody.find('[name="IsValid"]').val() === 'True';
                            if (isValid) {
                                placeHolderDiv.find('.modal').modal('hide');
                                const newTableRow = `
                                <tr>
                                                    <td>${categoryAddAjaxModel.CategoryDto.Category.Id}</td>
                                                    <td>${categoryAddAjaxModel.CategoryDto.Category.Name}</td>
                                                    <td>${categoryAddAjaxModel.CategoryDto.Category.Description}</td>
                                                    <td>${convertFirstLetterToUpperCase(categoryAddAjaxModel.CategoryDto.Category.IsActive.toString())}</td>
                                                    <td>${convertFirstLetterToUpperCase(categoryAddAjaxModel.CategoryDto.Category.IsDeleted.toString())}</td>
                                                    <td>${categoryAddAjaxModel.CategoryDto.Category.Note}</td>
                                                    <td>${convertToShortDate(categoryAddAjaxModel.CategoryDto.Category.CreatedDate)}</td>
                                                    <td>${categoryAddAjaxModel.CategoryDto.Category.CreatedByName}</td>
                                                    <td>${convertToShortDate(categoryAddAjaxModel.CategoryDto.Category.ModifiedDate)}</td>
                                                    <td>${categoryAddAjaxModel.CategoryDto.Category.ModifiedByName}</td>
                                                </tr>`;
                                const newTableRowObject = $(newTableRow);
                                newTableRowObject.hide();
                                $('#categoriesTable').append(newTableRowObject);
                                newTableRowObject.fadeIn(3500);
                                toastr.success(`${categoryAddAjaxModel.CategoryDto.Message}`, 'Başarılı İşlem!');
                            } else {
                                let summaryText = "";
                                $('#validation-summary > ul > li').each(function() {
                                    let text = $(this).text();
                                    summaryText = `${text}\n`;
                                });
                                toastr.warning(summaryText);
                            }
                        });
                    });
            });
             @* Ajax POST / Posting the FormData as CategoryAddDto ends here. *@
            @* Ajax POST / Deleting a Category starts from here *@
            $(document).on('click',
                '.btn-delete',
                function(event) {
                    event.preventDefault();
                    const id = $(this).attr('data-id');
                    Swal.fire({
                        title: 'Silmek istediğinize emin misiniz?',
                        text: "Seçili kategori silinicektir!",
                        icon: 'warning',
                        showCancelButton: true,
                        confirmButtonColor: '#3085d6',
                        cancelButtonColor: '#d33',
                        confirmButtonText: 'Evet, silmek istiyorum.',
                        cancelButtonText: 'Hayır, silmek istemiyorum.'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            $.ajax({
                                type: 'POST',
                                dataType: 'json',
                                data: { categoryId: id },
                                url: '@Url.Action("Delete", "Category")',
                                success: function(data) {
                                    const result = jQuery.parseJSON(data);
                                    if (result.ResultStatus === 0) {
                                        Swal.fire(
                                            'Silindi!',
                                            'Seçili kategori başarıyla silinmiştir.',
                                            'success'
                                        );
                                        const tableRow = $(`[name="${id}"]`);
                                        tableRow.fadeOut(3500);
                                    } else {
                                        Swal.fire({
                                            icon: 'error',
                                            title: 'Bir hata oluştu!',
                                            text: `${result.Message}`,udemy
                                        });
                                    }
                                },
                                error: function(err) { console.log(err); }
                            })
                        }
                    })
                });
        });
    </script>
}
